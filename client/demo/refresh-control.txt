--- script
<h1>KeyGrip Demo</h1>


<p>Goal: Help you tell a story with live coding.</p>


<p>Walk through how it works with iPad on reflector.</p>


<p>We want to show how to use the refresh control:</p>


<p>Create new Xcode project (master detail template).</p>


<p>Build and run the app to see it's initial state.</p>


<p>Add this code to the end of <code>-viewDidLoad</code> in <code>RCWMasterViewController.m</code>.</p>


--- clip
self.refreshControl = [[UIRefreshControl alloc] init];
[self.refreshControl addTarget:self action:@selector(refreshTriggered) forControlEvents:UIControlEventValueChanged];
--- script


<p>Build <code>-refreshTriggered</code> control callback.</p>


--- clip
- (void)refreshTriggered
{
}
--- script


<p>Do the actual work. In this case we'll just reuse the method to insert a row with the current timestamp.</p>


--- clip
[self insertNewObject:nil];
--- script


<p>Run the app to test.</p>


<p>Then we need to tell the refresh control to stop updating.</p>


--- clip
[self.refreshControl endRefreshing];
--- script


<p>Run the app.</p>


<p>It happens so fast that we don't really get to see it in action as if we were talking over a network. Let's introduce a 2 second delay before completing this work and ending the refresh animation:</p>


--- clip
- (void)completeAsynchronousWork
{
    [self insertNewObject:nil];
    [self.refreshControl endRefreshing];
}
--- script


<p>Call that new method after two seconds.</p>


--- clip
[self performSelector:@selector(completeAsynchronousWork) withObject:nil afterDelay:2];
--- script


<p>Run the app.</p>


<p>What we just did:</p>


<ul>
<li>Created and added the control to the table view controller</li>
<li>Responded to the control action</li>
<li>Do some sort of asynchronous work</li>
<li>Call back on ourselves to end the refresh control animation</li>
</ul>


<p><br></p>


<h1>KeyGrip Usage</h1>


<p>So, how does this work? <strong>Two parts</strong></p>


<h3>KeyGripServer</h3>


<ul>
<li>Run on your mac</li>
<li>Exposes server on a random port</li>
<li>Current version uses an access key to do digest hashing so no one can control your server without the key.</li>
<li>Does <em>not</em> use bonjour because it has proven unreliable in hotel and conference wifi.</li>
<li>Instead, we use raw IP address and communicate the address, port, and access code to the client with the QR code.</li>
<li>At the moment, the only way to get the scripts into the key grip server is drag and drop like so...</li>
</ul>


<p><br></p>


<h3>KeyGripClient</h3>


<p><em>Pull up reflector</em></p>


<p>That brings us to the client</p>


<ul>
<li>In the settings, you can control the server it talks to</li>
<li>Scan to import settings</li>
<li>Immediately tries to load the script</li>
<li>You see two kinds of elements in this list
<ul>
<li>Script items, which are HTML content that display whatever you want as your "speaker notes" or script</li>
<li>Clip items, which are plain text that are copied verbatim into your mac's clipboard when you tap on it, like so...</li>
</ul>
</li>
</ul>


<p><br></p>


<p><em>Pull up stickies to see the paste.</em></p>


<p>You can see how tapping on different items in the table view copies the result to the clipboard, and I paste them in with Ctrl-V.</p>


<h3>File Format</h3>


<p>At the moment, the file format is extremly simple.</p>


<ul>
<li>It is just a plain text file with the script and clip items separated by "---" and the word "script" or "clip".</li>
<li>We have plans for a more robust format in XML, helps with annotations and what not.</li>
</ul>


<p><br></p>


<h1>Ending Notes</h1>


<ul>
<li>Planning to use zeromq for robustness</li>
<li>We're pretty excited about this and use it all the time.</li>
<li>Let us know if you're interested in offering us feedback on how this goes.</li>
</ul>

