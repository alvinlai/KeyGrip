# KeyGrip Demo

Goal: Help you tell a story with live coding.

Walk through how it works with iPad on reflector.

We want to show how to use the refresh control:

Create new Xcode project (master detail template).

Build and run the app to see it's initial state.

Add this code to the end of `-viewDidLoad` in `RCWMasterViewController.m`.

    self.refreshControl = [[UIRefreshControl alloc] init];
    [self.refreshControl addTarget:self action:@selector(refreshTriggered) forControlEvents:UIControlEventValueChanged];

Build `-refreshTriggered` control callback.

    - (void)refreshTriggered
    {
    }

Do the actual work. In this case we'll just reuse the method to insert a row with the current timestamp.

    [self insertNewObject:nil];

Run the app to test.

Then we need to tell the refresh control to stop updating.

    [self.refreshControl endRefreshing];

Run the app.

It happens so fast that we don't really get to see it in action as if we were talking over a network. Let's introduce a 2 second delay before completing this work and ending the refresh animation:

    - (void)completeAsynchronousWork
    {
        [self insertNewObject:nil];
        [self.refreshControl endRefreshing];
    }

Call that new method after two seconds.

    [self performSelector:@selector(completeAsynchronousWork) withObject:nil afterDelay:2];

Run the app.

What we just did:

- Created and added the control to the table view controller
- Responded to the control action
- Do some sort of asynchronous work
- Call back on ourselves to end the refresh control animation

<br>

# KeyGrip Usage

So, how does this work? **Two parts**

### KeyGripServer

- Run on your mac
- Exposes server on a random port
- Current version uses an access key to do digest hashing so no one can control your server without the key.
- Does *not* use bonjour because it has proven unreliable in hotel and conference wifi.
- Instead, we use raw IP address and communicate the address, port, and access code to the client with the QR code.
- At the moment, the only way to get the scripts into the key grip server is drag and drop like so...

<br>

### KeyGripClient

*Pull up reflector*

That brings us to the client

- In the settings, you can control the server it talks to
- Scan to import settings
- Immediately tries to load the script
- You see two kinds of elements in this list
    - Script items, which are HTML content that display whatever you want as your "speaker notes" or script
    - Clip items, which are plain text that are copied verbatim into your mac's clipboard when you tap on it, like so...

<br>

*Pull up stickies to see the paste.*

You can see how tapping on different items in the table view copies the result to the clipboard, and I paste them in with Ctrl-V.

### File Format

At the moment, the file format is extremly simple.

- It is just a plain text file with the script and clip items separated by "---" and the word "script" or "clip".
- We have plans for a more robust format in XML, helps with annotations and what not.

<br>

# Ending Notes

- Planning to use zeromq for robustness
- We're pretty excited about this and use it all the time.
- Let us know if you're interested in offering us feedback on how this goes.

